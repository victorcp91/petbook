name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Pre-deployment Tests
  pre-deployment-tests:
    name: Pre-deployment Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Run E2E tests
        run: |
          npm run dev &
          npx wait-on http://localhost:3000
          npx cypress run --spec "cypress/e2e/**/*.cy.ts" --config-file cypress.config.ts
        env:
          CI: true

      - name: Run visual regression tests
        run: |
          npm run dev &
          npx wait-on http://localhost:3000
          npx cypress run --spec "cypress/e2e/visual-regression.cy.ts" --config-file cypress.config.ts
        env:
          CI: true
          visualRegressionType: regression

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pre-deployment-test-results
          path: |
            coverage/
            cypress/videos/
            cypress/screenshots/
            cypress/visual-regression/
            test-results/

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: pre-deployment-tests
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            out/
            public/

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    environment: staging
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Run post-deployment tests
        run: |
          # Wait for deployment to be ready
          sleep 60

          # Run smoke tests against staging
          npm run test:smoke -- --baseUrl=${{ steps.deploy.outputs.preview-url }}

      - name: Upload deployment results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: staging-deployment-results
          path: |
            test-results/
            coverage/

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    environment: production
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Run post-deployment tests
        run: |
          # Wait for deployment to be ready
          sleep 60

          # Run smoke tests against production
          npm run test:smoke -- --baseUrl=${{ steps.deploy.outputs.preview-url }}

      - name: Upload deployment results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: production-deployment-results
          path: |
            test-results/
            coverage/

  # Post-deployment Monitoring
  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run health checks
        run: |
          # Run health checks against production
          npm run test:health -- --baseUrl=${{ needs.deploy-production.outputs.url }}

      - name: Run performance tests
        run: |
          # Run Lighthouse CI against production
          npx lhci autorun --url=${{ needs.deploy-production.outputs.url }}

      - name: Send deployment notification
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ needs.deploy-production.outputs.url }}';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Deployment Complete!**
              
              **Production URL:** ${deploymentUrl}
              
              **Test Results:**
              - âœ… Pre-deployment tests passed
              - âœ… Build successful
              - âœ… Staging deployment successful
              - âœ… Production deployment successful
              - âœ… Post-deployment monitoring passed
              
              **Next Steps:**
              - Monitor application performance
              - Check error logs
              - Verify all features are working correctly`
            });
